docker-defaults: &docker-defaults
  docker:
    - image: circleci/node:12-browsers

defaults: &defaults
  <<: *docker-defaults
  working_directory: ~/repo

version: 2.1

executors:
  docker-publisher:
    <<: *docker-defaults
    environment:
      IMAGE_NAME: moduscreate/gimbal

jobs:
  build-docker:
    <<: *defaults
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: |
            # gives version without the v prefix, e.g. 1.2.3
            IMAGE_TAG=${CIRCLE_TAG/v/''}
            # gives minor version for latest, e.g. 1.2:latest
            MINOR_VERSION=$(echo "$CIRCLE_TAG" | sed -E 's/v([[:digit:]]+).([[:digit:]]+).([[:digit:]]+)/\1.\2-latest/g')
            # gives major version for latest, e.g. 1:latest
            MAJOR_VERSION=$(echo "$CIRCLE_TAG" | sed -E 's/v([[:digit:]]+).([[:digit:]]+).([[:digit:]]+)/\1-latest/g')
            docker build \
              --build-arg GIMBAL_VERSION=$IMAGE_TAG \
              -t $IMAGE_NAME:latest \
              -t $IMAGE_NAME:$IMAGE_TAG \
              -t $IMAGE_NAME:$MINOR_VERSION \
              -t $IMAGE_NAME:$MAJOR_VERSION \
              packages/gimbal
      - run:
          name: Archive Docker image
          command: docker save -o gimbal.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./gimbal.tar

  publish:
    <<: *defaults
    executor: docker-publisher
    steps:
      - checkout
      - run:
          name: Setup .npmrc
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc
      - run: yarn
      - run: yarn lint
      - run: yarn test
      - run: yarn lerna publish from-package --yes

  publish-docker:
    <<: *defaults
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/gimbal.tar
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            # push the image with no tag and it will push all tags
            docker push $IMAGE_NAME

workflows:
  version: 2
  publish:
    jobs:
      - publish:
          context: deploy-creds
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
      - build-docker:
          context: deploy-creds
          requires:
            - publish
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
      - publish-docker:
          context: deploy-creds
          requires:
            - build-docker
            - publish
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v.*/
